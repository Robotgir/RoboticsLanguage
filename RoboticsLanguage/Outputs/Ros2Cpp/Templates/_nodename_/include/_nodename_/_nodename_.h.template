<<<header->>>
/*
 * Node name: {{parameters.node.name}}
 *
 * Generated on: {{"%d %B, %Y"|todaysDate}}
 *       Author: {{parameters.Information.user.name}}
 *      Licence: {{parameters.Information.software.license}}
 *    Copyright: {{parameters.Information.software.copyright}}
 *
 *    THIS FILE WAS AUTOMATICALLY GENERATED USING THE ROBOTICS LANGUAGE
 *
 */
#ifndef {{parameters.node.name|underscoreFullCaps}}_{{parameters.node.name|underscoreFullCaps}}_H
#define {{parameters.node.name|underscoreFullCaps}}_{{parameters.node.name|underscoreFullCaps}}_H

// Base libraries
#include "rclcpp/rclcpp.hpp"

// extra global includes
{% for library in parameters.Outputs.Ros2Cpp.globalIncludes -%}
#include <{{library}}>
{% endfor -%}

<<<'includes'|group>>>

using std::placeholders::_1;

/***************************************************************************************
*       {{parameters.node.name|camelCase }}Class Declaration
****************************************************************************************/
namespace {{parameters.node.name|underscore}}
{
  class {{parameters.node.name|camelCase }}Class : public rclcpp::Node
  {
    public:

      // Constructor
      {{parameters.node.name|camelCase }}Class() : Node("{{parameters.node.name|underscore}}") {};

      /*!
       * @brief Spins the node (checks for ros callbacks)
       */
      void spin();

      /*!
       * @brief initialise initializes anything needed for this node
       */
      virtual void initialise();

      /*!
       * @brief finalise the last code to run before node stops
       */
      virtual void finalise();

    private:

      /* definitions */
      {{code|xpath('/node')|option('definitions')|attribute('Ros2Cpp')}};

      <<<'definitions'|group>>>
  };
}

#endif // {{parameters.node.name|underscoreFullCaps }}_{{parameters.node.name|underscoreFullCaps }}_H
